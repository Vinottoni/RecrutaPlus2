@model FuncionarioSearch

@{
    Layout = "_Layout";
    ViewData["Title"] = "Dashboard - RecrutaPlus";
}

<div class="content-pages">
    <div class="container">
        <div class="page-titles">
            <h2 class="text-title-nero">
                <strong>Geral Information </strong>
            </h2>
        </div>
        <div class="section-block">
            <h5 class="section-title"> Dashboard</h5>
            <div class="metric-row d-flex flex-wrap justify-content-between">
                <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-2">
                    <div class="card-metric-custom bg-primary shadow">
                        <div>
                            <p class="metric-value h1">
                                <sub><i class="fa-solid fa-chart-line text-white"></i></sub> <span class="value text-white">@Html.DisplayFor(model => model.DashboardViewModel.TotalFuncionarios)</span>
                            </p>
                            <label class="metric-label text-white">Total de Funcionarios</label>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-2">
                    <div class="card-metric-custom bg-primary shadow">
                        <div>
                            <p class="metric-value h1">
                                <sub><i class="fa-solid fa-chart-line text-white"></i></sub> <span class="value text-white">@Html.DisplayFor(model => model.DashboardViewModel.FuncionariosAtivos)</span>
                            </p>
                            <label class="metric-label text-white">Funcionarios Ativos</label>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-2">
                    <div class="card-metric-custom bg-primary shadow">
                        <div>
                            <p class="metric-value h1">
                                <sub><i class="fa-solid fa-chart-line text-white"></i></sub> <span class="value text-white">@Html.DisplayFor(model => model.DashboardViewModel.FuncionariosDesativados)</span>
                            </p>
                            <label class="metric-label text-white">Funcionarios Desativados</label>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-2">
                    <div class="card-metric-custom bg-primary shadow">
                        <div>
                            <p class="metric-value h1">
                                <sub><i class="fa-solid fa-chart-line text-white"></i></sub> <span class="value text-white">@Html.DisplayFor(model => model.DashboardViewModel.FuncionariosRecentes)</span>
                            </p>
                            <label class="metric-label text-white">Funcionarios Recentes</label>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <hr class="hr-color" />

        <div class="accordion" id="accordionPanelsStayOpenExample">
            <div class="accordion-item shadow">
                <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                    <button class="accordion-button bg-primary" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                        <strong class="text-white">Funcionários Recentes</strong>
                    </button>
                </h2>
                <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                    <div class="accordion-body">
                        <div class="table-responsive">
                            <table class="table datatables-table table-borderless" style="width:100%">
                                <thead>
                                    <tr class="text-primary border border-primary">
                                        <th>
                                            @Html.DisplayNameFor(model => model.Itens.FirstOrDefault().Nome)
                                        </th>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Itens.FirstOrDefault().Email)
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="border border-primary">
                                    @foreach (FuncionarioViewModel item in Model.Itens.Take(3))
                                    {
                                        <tr>
                                            <td class="text-left align-middle">
                                                @Html.DisplayFor(modelItem => item.Nome)
                                            </td>
                                            <td class="text-left align-middle">
                                                @Html.DisplayFor(modelItem => item.Email)
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-12 col-md-12">&nbsp;</div>

        <div class="card shadow">
            <div class="card-body d-flex justify-content-center">
                <div class="col-sm-12 col-md-6 justify-content-center d-flex">
                    <canvas id="myChart" class="size-canva"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@{
    var funcionariosTotais = ViewBag.FuncionariosTotais;
    var funcionariosAtivos = ViewBag.FuncionariosAtivos;
    var funcionariosDesativados = ViewBag.FuncionariosDesativados;

    var TotalSerializados = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(funcionariosTotais));
    var ativosSerializados = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(funcionariosAtivos));
    var desativadosSerializados = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(funcionariosDesativados));
}

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        var funcionariosTotais = @funcionariosTotais;
        var funcionariosAtivos = @ativosSerializados;
        var funcionariosDesativados = @desativadosSerializados;

        $(document)
            .ready(function () {
                const ctx = document.getElementById('myChart');
                const myChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Ativos', 'Desativados'],
                        datasets: [{
                            label: [''],
                            data: [funcionariosAtivos, funcionariosDesativados],
                            backgroundColor: [
                                'rgba(167, 215, 41, 1)',
                                'rgba(255, 174, 174, 1)',
                            ],
                            borderColor: [
                                'rgba(167, 215, 4, 1)',
                                'rgba(255, 174, 174, 1)',
                            ],
                            borderWidth: 1
                        }]
                    },
                });
                const grafctx = document.getElementById('grafBar');
            })

    </script>
}

